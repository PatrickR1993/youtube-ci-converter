#!/usr/bin/env python3
"""
YouTube CI Converter (ytcc) - Professional Command-Line Tool
A powerful CLI tool to download YouTube videos and translate Japanese audio to English with bilingual output.
"""

import os
import sys
import argparse
import subprocess
from pathlib import Path

# Add src directory to Python path
src_path = str(Path(__file__).parent / "src")
if src_path not in sys.path:
    sys.path.insert(0, src_path)

# Import modules from src
import progress_tracker as pt
import utils
import youtube_downloader
import translator_interface


def collect_multiple_inputs():
    """Collect multiple URLs or files from user input."""
    inputs = {'urls': [], 'files': []}
    
    print("üéå YouTube CI Converter (ytcc) - Batch Processing")
    print("=" * 55)
    print("Enter YouTube URLs or file paths. Press Enter on empty line to start processing.")
    print("üìù Examples:")
    print("  https://youtu.be/VIDEO_ID")
    print("  C:\\path\\to\\audio.mp3")
    print("  /path/to/audio.mp3")
    print()
    
    while True:
        try:
            user_input = input("Enter URL or file path (empty to finish): ").strip()
        except (EOFError, KeyboardInterrupt):
            print("\n‚ùå Input cancelled")
            break
        
        if not user_input:
            break
            
        # Check if it's a YouTube URL
        if utils.is_valid_youtube_url(user_input):
            inputs['urls'].append(user_input)
            print(f"‚úÖ Added YouTube URL: {user_input}")
        else:
            # Treat as file path
            file_path = Path(user_input)
            if file_path.exists() and file_path.suffix.lower() == '.mp3':
                inputs['files'].append(str(file_path))
                print(f"‚úÖ Added file: {file_path.name}")
            elif file_path.exists():
                print(f"‚ö†Ô∏è  Warning: {file_path.name} is not an MP3 file, skipping")
            else:
                print(f"‚ö†Ô∏è  Warning: File not found: {user_input}, skipping")
    
    return inputs

def process_multiple_inputs(inputs, output_dir, args):
    """Process multiple URLs and files in batch."""
    total_items = len(inputs['urls']) + len(inputs['files'])
    
    if total_items == 0:
        print("‚ùå No valid inputs provided")
        return False
    
    print(f"\nüìä Processing {total_items} items:")
    print(f"  üîó YouTube URLs: {len(inputs['urls'])}")
    print(f"  üìÅ Local files: {len(inputs['files'])}")
    print()
    
    # Get API key once for all processing
    api_key = args.openai_key or os.getenv('OPENAI_API_KEY')
    if not api_key:
        print("‚ùå OpenAI API key required. Set OPENAI_API_KEY env var or use --openai-key")
        return False
    
    success_count = 0
    error_count = 0
    
    # Process all URLs
    for i, url in enumerate(inputs['urls'], 1):
        print(f"\n{'='*60}")
        print(f"üîó Processing YouTube URL {i}/{len(inputs['urls'])}: {url}")
        print(f"{'='*60}")
        
        try:
            # Create args object for this URL
            url_args = argparse.Namespace(**vars(args))
            url_args.url = [url]  # Make it a list since we changed to action='append'
            url_args.file = None
            
            # Initialize progress tracker for this item
            tracker = pt.UnifiedProgressTracker()
            
            # Process the YouTube URL
            input_file, video_title, video_output_dir = process_youtube_url(url_args, output_dir, tracker)
            
            # Run translation
            use_parallel = not args.no_parallel
            merge_segments = not args.short_segments
            success = run_translation(input_file, video_output_dir, tracker, api_key, 
                                    args.keep_transcript, args.separate_files, use_parallel, merge_segments)
            
            if success:
                print(f"‚úÖ Successfully processed: {video_title}")
                success_count += 1
            else:
                print(f"‚ùå Failed to process: {url}")
                error_count += 1
                
        except KeyboardInterrupt:
            print(f"\n‚ùå Processing cancelled by user at URL {i}")
            break
        except Exception as e:
            print(f"‚ùå Error processing {url}: {e}")
            error_count += 1
    
    # Process all files
    for i, file_path in enumerate(inputs['files'], 1):
        print(f"\n{'='*60}")
        print(f"üìÅ Processing file {i}/{len(inputs['files'])}: {Path(file_path).name}")
        print(f"{'='*60}")
        
        try:
            # Create args object for this file
            file_args = argparse.Namespace(**vars(args))
            file_args.file = [file_path]  # Make it a list since we changed to action='append'
            file_args.url = None
            
            # Initialize progress tracker for this item
            tracker = pt.UnifiedProgressTracker()
            
            # Process the file
            input_file, video_title, video_output_dir = process_existing_file(file_args, output_dir, tracker)
            
            # Run translation
            use_parallel = not args.no_parallel
            merge_segments = not args.short_segments
            success = run_translation(input_file, video_output_dir, tracker, api_key, 
                                    args.keep_transcript, args.separate_files, use_parallel, merge_segments)
            
            if success:
                print(f"‚úÖ Successfully processed: {Path(file_path).name}")
                success_count += 1
            else:
                print(f"‚ùå Failed to process: {file_path}")
                error_count += 1
                
        except KeyboardInterrupt:
            print(f"\n‚ùå Processing cancelled by user at file {i}")
            break
        except Exception as e:
            print(f"‚ùå Error processing {file_path}: {e}")
            error_count += 1
    
    # Summary
    print(f"\n{'='*60}")
    print(f"üìä Batch Processing Complete")
    print(f"{'='*60}")
    print(f"‚úÖ Successful: {success_count}")
    print(f"‚ùå Failed: {error_count}")
    print(f"üìÇ Output directory: {output_dir}")
    
    return success_count > 0


def check_dependencies():
    """Check if required dependencies are available."""
    # Check if FFmpeg is available
    try:
        subprocess.run(['ffmpeg', '-version'], 
                      stdout=subprocess.DEVNULL, 
                      stderr=subprocess.DEVNULL, 
                      check=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ö†Ô∏è  Warning: FFmpeg not found. Required for audio conversion.")
        print("   Install: https://ffmpeg.org/download.html")
        response = input("Continue anyway? (y/n): ").strip().lower()
        if response != 'y':
            sys.exit(1)


def process_existing_file(args, output_dir, progress_tracker):
    """Process an existing MP3 file."""
    # Handle both single file and list of files (for backward compatibility)
    file_path = args.file[0] if isinstance(args.file, list) else args.file
    
    input_file = Path(file_path)
    if not input_file.exists():
        print(f"‚ùå File not found: {input_file}")
        sys.exit(1)
    if not input_file.suffix.lower() == '.mp3':
        print(f"‚ùå File must be an MP3: {input_file}")
        sys.exit(1)
    
    # For existing files, use "Local Files" as the channel name
    channel_name = "Local Files"
    video_title = input_file.stem
    sanitized_channel = utils.sanitize_filename(channel_name)
    
    # Create channel directory inside output_dir
    channel_output_dir = output_dir / sanitized_channel
    channel_output_dir.mkdir(exist_ok=True)
    
    # Start progress tracking
    progress_tracker.start("üéå YouTube CI Converter")
    
    # Copy file to channel directory with proper naming
    import shutil
    target_file = channel_output_dir / f"{video_title}.mp3"
    if not target_file.exists():
        shutil.copy2(input_file, target_file)
    
    return target_file, video_title, channel_output_dir


def process_youtube_url(args, output_dir, progress_tracker):
    """Download and process a YouTube URL."""
    # Handle both single URL and list of URLs (for backward compatibility)
    url = args.url[0] if isinstance(args.url, list) else args.url
    
    if not utils.is_valid_youtube_url(url):
        print("‚ùå Error: Invalid YouTube URL provided.")
        sys.exit(1)
    
    # Start progress tracking
    progress_tracker.start("üéå YouTube CI Converter")
    
    # Download and convert
    downloader = youtube_downloader.YouTubeDownloader(output_dir)
    downloaded_file = downloader.download_and_convert(url, progress_tracker)
    
    if downloaded_file:
        # Extract video info for naming
        video_info = downloader.get_video_info(url)
        video_title = video_info.get('title', 'Unknown Video')
        channel_name = video_info.get('uploader', 'Unknown Channel')
        
        # The downloaded file is already in the correct channel directory
        video_output_dir = downloaded_file.parent  # This is already the channel directory
        print(f"üìÇ Channel: {channel_name}")
        print(f"üìÅ Video: {video_title}")
        return downloaded_file, video_title, video_output_dir
    else:
        progress_tracker.finish("‚ùå Download failed")
        print("‚ùå Could not download or find MP3 file")
        sys.exit(1)


def run_translation(input_file, video_output_dir, progress_tracker, api_key, keep_transcript=False, separate_files=False, use_parallel=True, merge_segments=True):
    """Run the translation process with optional parallel processing and segment merging.
    
    Args:
        use_parallel: If True, uses parallel processing for faster translation and TTS generation
        merge_segments: If True, merges short Whisper segments into longer sentences
    """
    # Get the AudioTranslator class
    AudioTranslator = translator_interface.get_audio_translator_class()
    if not AudioTranslator:
        progress_tracker.finish("‚ùå Translation module missing")
        sys.exit(1)
    
    # Initialize translator
    translator = AudioTranslator(api_key)
    
    # Run translation with progress tracking (now with parallel processing and segment merging options)
    output_file = translator_interface.run_translation_with_progress(
        translator, input_file, video_output_dir, progress_tracker, separate_files, use_parallel, merge_segments
    )
    
    if output_file:
        progress_tracker.finish("‚úÖ Complete")
        
        # Handle transcript file
        transcript_file = video_output_dir / f"{input_file.stem}_transcript.json"
        
        if keep_transcript:
            # Show output file information including transcript
            print(f"\nüéâ Translation completed successfully!")
            print(f"üìÇ Channel folder: {video_output_dir}")
            if separate_files:
                print(f"üéµ Bilingual audio: {video_output_dir / f'{input_file.stem}_bilingual.mp3'}")
                print(f"üìº Original audio: {input_file}")
            else:
                print(f"üéØ Combined audio: {output_file}")
            print(f"üìÑ Transcript: {transcript_file}")
        else:
            # Remove transcript file if not requested
            if transcript_file.exists():
                transcript_file.unlink()
            
            print(f"\nüéâ Translation completed successfully!")
            print(f"üìÇ Channel folder: {video_output_dir}")
            if separate_files:
                print(f"üéµ Bilingual audio: {video_output_dir / f'{input_file.stem}_bilingual.mp3'}")
                print(f"üìº Original audio: {input_file}")
            else:
                print(f"üéØ Combined audio: {output_file}")
        
        return True
    else:
        progress_tracker.finish("‚ùå Translation failed")
        return False


def main():
    """Main function to run the ytcc CLI tool."""
    parser = argparse.ArgumentParser(
        prog='ytcc',
        description="YouTube CI Converter (ytcc) - Download YouTube videos and translate Japanese audio to English with bilingual output",
        epilog="Examples:\n"
               "  ytcc --url https://youtu.be/VIDEO_ID\n"
               "  ytcc --file podcast.mp3\n"
               "  ytcc --url https://youtu.be/VIDEO_ID1 --url https://youtu.be/VIDEO_ID2\n"
               "  ytcc --file audio1.mp3 --file audio2.mp3\n"
               "  ytcc  # Interactive mode - prompts for multiple URLs/files\n"
               "  ytcc --url https://youtu.be/VIDEO_ID --keep-transcript\n"
               "  ytcc --url https://youtu.be/VIDEO_ID --separate-files\n"
               "  ytcc --url https://youtu.be/VIDEO_ID --no-parallel  # Slower but more compatible\n"
               "  ytcc --setup\n"
               "  ytcc --test\n\n"
               "Performance: Uses high-concurrency parallel processing by default for much faster translation and TTS.\n"
               "Use --no-parallel if you experience API rate limiting or compatibility issues.\n\n"
               "Output: Creates a folder structure in ~/Downloads/YouTube CI Converter/:\n"
               "  - YouTube CI Converter/[Channel Name]/\n"
               "    - YYYY-MM-DD_VideoTitle_complete.mp3 (default: bilingual + original)\n"
               "    - YYYY-MM-DD_VideoTitle.mp3 (original, only with --separate-files)\n"
               "    - YYYY-MM-DD_VideoTitle_bilingual.mp3 (only with --separate-files)\n"
               "    - YYYY-MM-DD_VideoTitle_transcript.json (only with --keep-transcript)\n"
               "  (Local files use 'Local Files' as channel name)",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument(
        '--url', '-u',
        action='append',
        help='YouTube URL to convert (can be used multiple times for batch processing)'
    )
    parser.add_argument(
        '--file', '-f',
        action='append',
        help='Existing MP3 file to process (can be used multiple times for batch processing)'
    )
    parser.add_argument(
        '--output', '-o',
        help='Output directory for processed files (default: ~/Downloads/YouTube CI Converter/)'
    )
    parser.add_argument(
        '--openai-key',
        help='OpenAI API key for translation and natural TTS (required)'
    )
    parser.add_argument(
        '--setup',
        action='store_true',
        help='Run the setup process to install dependencies and configure the environment'
    )
    parser.add_argument(
        '--test',
        action='store_true',
        help='Run the test suite to verify functionality'
    )
    parser.add_argument(
        '--keep-transcript',
        action='store_true',
        help='Keep the JSON transcript file after processing (default: removed after use)'
    )
    parser.add_argument(
        '--separate-files',
        action='store_true',
        help='Keep bilingual and original audio as separate files (default: combined into one file)'
    )
    parser.add_argument(
        '--no-parallel',
        action='store_true',
        help='Disable parallel processing for translation and TTS (slower but more compatible)'
    )
    parser.add_argument(
        '--short-segments',
        action='store_true',
        help='Keep Whisper segments short instead of merging into longer sentences'
    )
    
    args = parser.parse_args()
    
    # Handle setup command
    if args.setup:
        sys.path.insert(0, str(Path(__file__).parent / "src"))
        import setup
        sys.exit(0 if setup.run_setup() else 1)
    
    # Handle test command
    if args.test:
        sys.path.insert(0, str(Path(__file__).parent / "tests"))
        import tests
        print("üß™ Running test suite...")
        success = tests.run_all_tests()
        sys.exit(0 if success else 1)
    
    # Validate and collect inputs
    if not args.setup and not args.test:
        # Check if we have any command line inputs
        has_urls = args.url and len(args.url) > 0
        has_files = args.file and len(args.file) > 0
        
        if not has_urls and not has_files:
            # No command line inputs - collect interactively
            inputs = collect_multiple_inputs()
            
            # Check dependencies
            check_dependencies()
            
            # Get output directory
            if args.output:
                output_dir = Path(args.output)
                output_dir.mkdir(parents=True, exist_ok=True)
            else:
                output_dir = utils.get_output_directory()
            
            # Process all collected inputs
            success = process_multiple_inputs(inputs, output_dir, args)
            sys.exit(0 if success else 1)
        
        elif has_urls and has_files:
            # Both provided via command line - process all
            inputs = {'urls': args.url, 'files': args.file}
            
            # Check dependencies
            check_dependencies()
            
            # Get output directory
            if args.output:
                output_dir = Path(args.output)
                output_dir.mkdir(parents=True, exist_ok=True)
            else:
                output_dir = utils.get_output_directory()
            
            # Process all inputs
            success = process_multiple_inputs(inputs, output_dir, args)
            sys.exit(0 if success else 1)
        
        else:
            # Single input type provided via command line
            if has_urls:
                inputs = {'urls': args.url, 'files': []}
            else:
                inputs = {'urls': [], 'files': args.file}
            
            # For single inputs, use batch processing if multiple items
            if len(inputs['urls']) + len(inputs['files']) > 1:
                # Check dependencies
                check_dependencies()
                
                # Get output directory
                if args.output:
                    output_dir = Path(args.output)
                    output_dir.mkdir(parents=True, exist_ok=True)
                else:
                    output_dir = utils.get_output_directory()
                
                # Process all inputs
                success = process_multiple_inputs(inputs, output_dir, args)
                sys.exit(0 if success else 1)
    
    # Handle single input (backward compatibility)
    check_dependencies()
    
    # Get output directory
    if args.output:
        output_dir = Path(args.output)
        output_dir.mkdir(parents=True, exist_ok=True)
    else:
        output_dir = utils.get_output_directory()
    
    # Initialize unified progress tracker
    tracker = pt.UnifiedProgressTracker()
    
    # Process single input: either YouTube URL or existing file
    try:
        if args.file and len(args.file) > 0:
            input_file, video_title, video_output_dir = process_existing_file(args, output_dir, tracker)
        elif args.url and len(args.url) > 0:
            input_file, video_title, video_output_dir = process_youtube_url(args, output_dir, tracker)
        else:
            print("‚ùå No input provided")
            sys.exit(1)
        
        # Get API key
        api_key = args.openai_key or os.getenv('OPENAI_API_KEY')
        if not api_key:
            tracker.finish("‚ùå Missing API key")
            print("‚ùå OpenAI API key required. Set OPENAI_API_KEY env var or use --openai-key")
            sys.exit(1)
        
        # Run translation with parallel processing and segment merging options
        use_parallel = not args.no_parallel  # Default to parallel unless --no-parallel is specified
        merge_segments = not args.short_segments  # Default to merge unless --short-segments is specified
        success = run_translation(input_file, video_output_dir, tracker, api_key, args.keep_transcript, args.separate_files, use_parallel, merge_segments)
        
        if not success:
            sys.exit(1)
            
    except KeyboardInterrupt:
        if 'tracker' in locals():
            tracker.finish("‚ùå Cancelled by user")
        print("\n‚ùå Operation cancelled by user.")
        sys.exit(1)
    except Exception as e:
        if 'tracker' in locals():
            tracker.finish("‚ùå Error occurred")
        print(f"‚ùå Unexpected error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
